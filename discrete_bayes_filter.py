# -*- coding: utf-8 -*-
"""discrete_bayes_filter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12WdEux99JFno02IRIIIyDAyqaBRG3Dml
"""

import numpy as np

def predict(data, kernel):
    """
    Predict the future state probabilities using a motion model (kernel).

    Parameters:
        data (list or numpy array): List of current state probabilities.
        kernel (list or numpy array): Motion model or transition probabilities.

    Returns:
        list: A list of predicted state probabilities after applying the motion model.

    The predict step in the discrete Bayes filter estimates how the state evolves over time.
    It convolves the current state probabilities with a motion model (kernel) to predict
    the future probabilities. The convolution operation essentially represents the effect
    of the motion model on the current state probabilities. The resulting probabilities are
    returned as a list after being normalized to ensure they sum up to 1.
    """
    ls = data.copy()
    for i in range(len(data)):
        num = len(kernel) // 2
        add = data[i] * kernel
        for en, j in enumerate(range(i - num, i + num + 1)):
            j = j % len(data)
            ls[j] += add[en]
    return norm(ls)

def update(data, loc, prob):
    """
    Update the state probabilities based on new evidence (observation).

    Parameters:
        data (list or numpy array): List of current state probabilities.
        loc (int): Index of the location to be updated.
        prob (float): Likelihood of the observation at the specified location.

    Returns:
        list: A list of updated state probabilities after incorporating new evidence.

    The update step in the discrete Bayes filter integrates new evidence (observation)
    into the current state probabilities. The likelihood of the observation at the given
    location is used to update the belief in that particular state. The probabilities are
    scaled to ensure that the overall probabilities still sum up to 1. The updated state
    probabilities are returned as a list.
    """
    times = (1 - prob) / prob
    data[loc] *= times
    return norm(data)

def norm(data):
    """
    Normalize the probabilities to ensure they sum up to 1.

    Parameters:
        data (list or numpy array): List of probabilities to be normalized.

    Returns:
        list: A list of normalized probabilities.

    The normalization step is crucial in a discrete Bayes filter to ensure that the state
    probabilities remain valid probabilities and sum up to 1. This function scales the
    input probabilities such that their sum becomes 1 and returns the normalized probabilities.
    """
    return data / np.sum(data)

1,2,1

